package others;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import io.appium.java_client.android.Activity;
import io.appium.java_client.android.AndroidDriver;

import org.apache.commons.lang3.time.StopWatch;
import org.apache.poi.ss.usermodel.Workbook;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.AfterTest;

import util.BaseAppium;
import util.ExcelDataVO;
import util.ExcelWriter;
import util.ScreenshotListener;

public class OthersTest {
  AndroidDriver androidDriver;
  String enterButtonId = "android:id/button1";
  String switchButton = "android.widget.Switch";
  String longitudeId = "com.unicore.unicorecdt:id/tv_lon";
  String latitudeId = "com.unicore.unicorecdt:id/tv_lat";
  String altitudeId = "com.unicore.unicorecdt:id/tv_alt";
  List<ExcelDataVO> dataVOList = new ArrayList<>();
  @Test
  public void hotStartLocationTime() {
	  Activity activity = new Activity("com.unicore.unicorecdt", ".MainActivity");
	  for(int i = 0 ; i < 2 ; i++){
		  androidDriver.startActivity(activity);
		  //未打开定位按钮则打开
		  try{
			  if(BaseAppium.id(enterButtonId).isDisplayed()){
	  		  BaseAppium.className(switchButton).click();
	  		  BaseAppium.id(enterButtonId).click();
	  		  BaseAppium.back();
	  		  System.out.println("定位已开启");
			  }
		  }catch(Exception e){
			
		  }
		  writeLoationInfo();
		  BaseAppium.back();
		  BaseAppium.id(enterButtonId);
		
	  }
	// 写入数据到工作簿对象内
	  Workbook workbook = ExcelWriter.exportData(dataVOList);
	
	  // 以文件的形式输出工作簿对象
	  FileOutputStream fileOut = null;
	  try {
	      String exportFilePath = "/testProjects/ZengQiang/test-output/hotStartLocationResulte.xlsx";
	      File exportFile = new File(exportFilePath);
	      if (!exportFile.exists()) {
	          exportFile.createNewFile();
	      }
	
	      fileOut = new FileOutputStream(exportFilePath);
	      workbook.write(fileOut);
	      fileOut.flush();
	  } catch (Exception e) {
	  	System.out.println("输出Excel时发生错误，错误原因：" + e.getMessage());
	  } finally {
	      try {
	          if (null != fileOut) {
	              fileOut.close();
	          }
	          if (null != workbook) {
	              workbook.close();
	          }
	      } catch (IOException e) {
	          System.out.println("关闭输出流时发生错误，错误原因：" + e.getMessage());
	      }
	  }
	  
  }
  @BeforeMethod
  public void beforeMethod() {
  }

  @AfterMethod
  public void afterMethod() {
  }

  @BeforeClass
  public void beforeClass() {
  }

  @AfterClass
  public void afterClass() {
  }

  @BeforeTest
  public void beforeTest() throws MalformedURLException {
	  androidDriver = BaseAppium.init("com.android.launcher3", "com.android.launcher3.Launcher");
  	  ScreenshotListener.driver = androidDriver;
  }

  @AfterTest
  public void afterTest() throws InterruptedException {
	  Thread.sleep(10000);
	  androidDriver.quit();
  }
  //定位并把定位信息写入到excel文件
  public void writeLoationInfo(){
  	  
//	  //StopWatch是Apache Commons Lang库内的一部分。可以用来方便地进行计时
//	  StopWatch watch = new StopWatch();
//	  //开始计时
//	  watch.start();
	  
	  
	  long locationStart = new Date().getTime();
	  System.out.println("开始计时:" + locationStart);
	  
	  String longitude = BaseAppium.id(longitudeId).getText();
	  String latitude = BaseAppium.id(latitudeId).getText();
	  String altitude = BaseAppium.id(altitudeId).getText();
	  String result = "失败";
	  long locationTime = 0;
	  System.out.println("定位:" + longitude);
	  
//	  dataVOList = new ArrayList<>();
	  //循环判断经度数据是否有变化，有变化则定位成功
	  while(true){
		  //创建需要写入的数据列表
		  ExcelDataVO dataVO = new ExcelDataVO();
		  
		  long locationEnd = new Date().getTime();
		  String longitude2 = BaseAppium.id(longitudeId).getText();
		  System.out.println("定位中....");
		  //定到位退出循环
		  if(!longitude.equals(longitude2)){
			  //结束计时
	//		  watch.stop();
			  System.out.println("定位成功:" + longitude2 + "定位时间:" + (locationEnd - locationStart));
	//		  Assert.assertEquals(1, 1, "定位成功");
			  longitude = longitude2;
			  latitude = BaseAppium.id(latitudeId).getText();
			  altitude = BaseAppium.id(altitudeId).getText();
			  locationTime = locationEnd - locationStart;
			  result = "成功";
			  dataVO.setLongitude(longitude);
		      dataVO.setLatitude(latitude);
		      dataVO.setAltitude(altitude);
		      dataVO.setResult(result);
		      dataVO.setLocationTime(locationTime);
		      dataVOList.add(dataVO);
			  break;
		  }
		  //超过60秒未定到位退出循环
		  if(locationEnd-locationStart >= (int)60000){
			  System.out.println("超过60s还未定位:"+(locationEnd-locationStart));
	//		  Assert.assertEquals(1, 2, "定位超时");
			  result = "失败";
			  locationTime =  Long.valueOf("60").longValue();
			  dataVO.setLongitude(longitude);
		      dataVO.setLatitude(latitude);
		      dataVO.setAltitude(altitude);
		      dataVO.setResult(result);
		      dataVO.setLocationTime(locationTime);
		      dataVOList.add(dataVO);
			  break;
		  }	       
	  }
	  
	  }

}
